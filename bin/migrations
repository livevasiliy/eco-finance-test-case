#!/usr/bin/env php
<?php

require_once dirname(__DIR__) . '/bootstrap/bootstrap.php';
require_once dirname(__DIR__) . '/config/database.php';

use Doctrine\DBAL\DriverManager;
use Doctrine\Migrations\Configuration\Configuration;
use Doctrine\Migrations\Configuration\Connection\ExistingConnection;
use Doctrine\Migrations\Configuration\EntityManager\ExistingEntityManager;
use Doctrine\Migrations\Configuration\Migration\ExistingConfiguration;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Metadata\Storage\TableMetadataStorageConfiguration;
use Doctrine\Migrations\Tools\Console\Command;
use Livevasiliy\EcoFinanceTestCase\Kernel\Config;
use Livevasiliy\EcoFinanceTestCase\Provider\EntityManagerProvider;
use Symfony\Component\Console\Application;

$conn = (new Config())->getConfig();

$connection = DriverManager::getConnection($conn);

$configuration = new Configuration();

$configuration->addMigrationsDirectory('Livevasiliy\EcoFinanceTestCase\Migrations', dirname(__DIR__) . '/database/migrations');
$configuration->setAllOrNothing(true);
$configuration->setCheckDatabasePlatform(false);
$configuration->setEntityManagerName(null);


$storageConfiguration = new TableMetadataStorageConfiguration();
$storageConfiguration->setTableName('doctrine_migration_versions');

$configuration->setMetadataStorageConfiguration($storageConfiguration);

$dependencyFactory = DependencyFactory::fromEntityManager(
    new ExistingConfiguration($configuration),
    new ExistingEntityManager(EntityManagerProvider::getEntityManager())
);

$cli = new Application('Doctrine Migrations');
$cli->setCatchExceptions(true);

$cli->addCommands([
    new Command\CurrentCommand($dependencyFactory),
    new Command\DiffCommand($dependencyFactory),
    new Command\DumpSchemaCommand($dependencyFactory),
    new Command\ExecuteCommand($dependencyFactory),
    new Command\GenerateCommand($dependencyFactory),
    new Command\LatestCommand($dependencyFactory),
    new Command\ListCommand($dependencyFactory),
    new Command\MigrateCommand($dependencyFactory),
    new Command\RollupCommand($dependencyFactory),
    new Command\StatusCommand($dependencyFactory),
    new Command\SyncMetadataCommand($dependencyFactory),
    new Command\UpToDateCommand($dependencyFactory),
    new Command\VersionCommand($dependencyFactory),
]);

$cli->run();